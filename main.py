from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import requests
import json
from twilio.rest import Client
from typing import Dict, Any
import os
from datetime import datetime
import asyncio
from googletrans import Translator
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

# Twilio Configuration
TWILIO_SID = os.getenv("TWILIO_SID")
TWILIO_TOKEN = os.getenv("TWILIO_TOKEN")
TWILIO_WHATSAPP_NUMBER = os.getenv("TWILIO_WHATSAPP_SANDBOX")  # Twilio sandbox number

client = Client(TWILIO_SID, TWILIO_TOKEN)
translator = Translator()

# Alternative Health APIs (Working ones)
DISEASE_API = "https://disease.sh/v3/covid-19"  # Disease.sh for COVID data
OPENWEATHER_API = "https://api.openweathermap.org/data/2.5"  # Weather affects health
NEWS_API = "https://newsapi.org/v2/everything"  # Health news

@app.post("/webhook")
async def dialogflow_webhook(request: Request):
    """Handle Dialogflow webhook requests"""
    req = await request.json()
    
    intent_name = req.get("queryResult", {}).get("intent", {}).get("displayName", "")
    parameters = req.get("queryResult", {}).get("parameters", {})
    query_text = req.get("queryResult", {}).get("queryText", "")
    
    # Detect language for multilingual support
    detected_lang = await detect_language(query_text)
    
    # Process different intents
    if intent_name == "symptoms.query":
        response = await handle_symptoms_query(parameters)
    elif intent_name == "vaccination.query":
        response = await handle_vaccination_query(parameters)
    elif intent_name == "prevention.query":
        response = await handle_prevention_query(parameters)
    elif intent_name == "health.data.query":
        response = await handle_health_data_query(parameters)
    elif intent_name == "emergency.query":
        response = await handle_emergency_query(parameters)
    else:
        response = "ЁЯПе I'm your AI health assistant! Ask me about:\nтАв Disease symptoms (рдмреАрдорд╛рд░реА рдХреЗ рд▓рдХреНрд╖рдг)\nтАв Prevention tips (рдмрдЪрд╛рд╡ рдХреЗ рддрд░реАрдХреЗ)\nтАв Vaccination info (рдЯреАрдХрд╛рдХрд░рдг рдЬрд╛рдирдХрд╛рд░реА)\nтАв Health data (рд╕реНрд╡рд╛рд╕реНрдереНрдп рдбреЗрдЯрд╛)\nтАв Emergency contacts (рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рдВрдкрд░реНрдХ)"
    
    # Translate response if needed
    if detected_lang == 'hi' and not any(hindi_char in response for hindi_char in ['рдХ', 'рдЦ', 'рдЧ', 'рдШ']):
        response = await translate_text(response, 'hi')
    
    return JSONResponse({"fulfillmentText": response})

async def handle_symptoms_query(parameters: Dict) -> str:
    """Handle symptom-related queries with comprehensive disease info"""
    disease = parameters.get("disease", "").lower()
    
    symptoms_db = {
        "malaria": {
            "english": """ЁЯжЯ MALARIA SYMPTOMS:
тАв High fever (101-104┬░F) with chills
тАв Severe headache and body aches  
тАв Nausea, vomiting, diarrhea
тАв Sweating and fatigue
тАв Abdominal pain
тАв Muscle pain

тЪая╕П SEEK IMMEDIATE MEDICAL ATTENTION if you have these symptoms!""",
            "hindi": """ЁЯжЯ рдорд▓реЗрд░рд┐рдпрд╛ рдХреЗ рд▓рдХреНрд╖рдг:
тАв рддреЗрдЬрд╝ рдмреБрдЦрд╛рд░ (101-104┬░F) рдардВрдб рдХреЗ рд╕рд╛рде
тАв рдЧрдВрднреАрд░ рд╕рд┐рд░рджрд░реНрдж рдФрд░ рд╢рд░реАрд░ рдореЗрдВ рджрд░реНрдж
тАв рдЬреА рдорд┐рдЪрд▓рд╛рдирд╛, рдЙрд▓реНрдЯреА, рджрд╕реНрдд
тАв рдкрд╕реАрдирд╛ рдФрд░ рдердХрд╛рди
тАв рдкреЗрдЯ рдореЗрдВ рджрд░реНрдж
тАв рдорд╛рдВрд╕рдкреЗрд╢рд┐рдпреЛрдВ рдореЗрдВ рджрд░реНрдж

тЪая╕П рддреБрд░рдВрдд рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ!"""
        },
        "dengue": {
            "english": """ЁЯжЯ DENGUE SYMPTOMS:
тАв High fever (104┬░F) for 3-7 days
тАв Severe headache (frontal headache)
тАв Pain behind eyes (retro-orbital pain)
тАв Muscle and joint pain
тАв Skin rash (appears 3-5 days after fever)
тАв Nausea and vomiting
тАв Easy bruising

тЪая╕П Watch for WARNING SIGNS: Persistent vomiting, severe abdominal pain, difficulty breathing""",
            "hindi": """ЁЯжЯ рдбреЗрдВрдЧреВ рдХреЗ рд▓рдХреНрд╖рдг:
тАв рддреЗрдЬрд╝ рдмреБрдЦрд╛рд░ (104┬░F) 3-7 рджрд┐рди рддрдХ
тАв рдЧрдВрднреАрд░ рд╕рд┐рд░рджрд░реНрдж (рдорд╛рдереЗ рдореЗрдВ рджрд░реНрдж)
тАв рдЖрдВрдЦреЛрдВ рдХреЗ рдкреАрдЫреЗ рджрд░реНрдж
тАв рдорд╛рдВрд╕рдкреЗрд╢рд┐рдпреЛрдВ рдФрд░ рдЬреЛрдбрд╝реЛрдВ рдореЗрдВ рджрд░реНрдж
тАв рддреНрд╡рдЪрд╛ рдкрд░ рджрд╛рдиреЗ (рдмреБрдЦрд╛рд░ рдХреЗ 3-5 рджрд┐рди рдмрд╛рдж)
тАв рдЬреА рдорд┐рдЪрд▓рд╛рдирд╛ рдФрд░ рдЙрд▓реНрдЯреА
тАв рдЖрд╕рд╛рдиреА рд╕реЗ рдиреАрд▓ рдкрдбрд╝рдирд╛

тЪая╕П рдЪреЗрддрд╛рд╡рдиреА рдХреЗ рд╕рдВрдХреЗрдд: рд▓рдЧрд╛рддрд╛рд░ рдЙрд▓реНрдЯреА, рдкреЗрдЯ рдореЗрдВ рддреЗрдЬрд╝ рджрд░реНрдж"""
        },
        "covid": {
            "english": """ЁЯШ╖ COVID-19 SYMPTOMS:
тАв Fever or chills
тАв Dry cough
тАв Shortness of breath
тАв Fatigue
тАв Body aches
тАв Loss of taste or smell
тАв Sore throat
тАв Congestion or runny nose
тАв Nausea or vomiting
тАв Diarrhea

тЪая╕П EMERGENCY SIGNS: Difficulty breathing, persistent chest pain, confusion""",
            "hindi": """ЁЯШ╖ рдХреЛрд╡рд┐рдб-19 рдХреЗ рд▓рдХреНрд╖рдг:
тАв рдмреБрдЦрд╛рд░ рдпрд╛ рдардВрдб рд▓рдЧрдирд╛
тАв рд╕реВрдЦреА рдЦрд╛рдВрд╕реА
тАв рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ
тАв рдердХрд╛рди
тАв рд╢рд░реАрд░ рдореЗрдВ рджрд░реНрдж
тАв рд╕реНрд╡рд╛рдж рдпрд╛ рдЧрдВрдз рдХрд╛ рдЪрд▓реЗ рдЬрд╛рдирд╛
тАв рдЧрд▓реЗ рдореЗрдВ рдЦрд░рд╛рд╢
тАв рдирд╛рдХ рдмрдВрдж рдпрд╛ рдмрд╣рдирд╛
тАв рдЬреА рдорд┐рдЪрд▓рд╛рдирд╛ рдпрд╛ рдЙрд▓реНрдЯреА
тАв рджрд╕реНрдд

тЪая╕П рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рдВрдХреЗрдд: рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рддрдХрд▓реАрдл, рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж"""
        },
        "typhoid": {
            "english": """ЁЯжа TYPHOID SYMPTOMS:
тАв Prolonged fever (102-104┬░F)
тАв Severe headache
тАв Weakness and abdominal pain
тАв Constipation or diarrhea
тАв Rose-colored rash on chest
тАв Loss of appetite

тЪая╕П Typhoid requires immediate antibiotic treatment!""",
            "hindi": """ЁЯжа рдЯрд╛рдЗрдлрд╛рдЗрдб рдХреЗ рд▓рдХреНрд╖рдг:
тАв рд▓рдВрдмреЗ рд╕рдордп рддрдХ рдмреБрдЦрд╛рд░ (102-104┬░F)
тАв рддреЗрдЬрд╝ рд╕рд┐рд░рджрд░реНрдж
тАв рдХрдордЬреЛрд░реА рдФрд░ рдкреЗрдЯ рджрд░реНрдж
тАв рдХрдмреНрдЬ рдпрд╛ рджрд╕реНрдд
тАв рдЫрд╛рддреА рдкрд░ рдЧреБрд▓рд╛рдмреА рд░рдВрдЧ рдХреЗ рдзрдмреНрдмреЗ
тАв рднреВрдЦ рди рд▓рдЧрдирд╛

тЪая╕П рдЯрд╛рдЗрдлрд╛рдЗрдб рдХрд╛ рддреБрд░рдВрдд рдЗрд▓рд╛рдЬ рдЬрд░реВрд░реА!"""
        }
    }
    
    if disease in symptoms_db:
        return f"{symptoms_db[disease]['english']}\n\n{symptoms_db[disease]['hindi']}\n\nЁЯУЮ Emergency Helpline: 102 (India)"
    
    return "I can provide symptom information for: Malaria, Dengue, COVID-19, Typhoid. Which disease would you like to know about?"

async def handle_prevention_query(parameters: Dict) -> str:
    """Handle prevention-related queries"""
    disease = parameters.get("disease", "").lower()
    
    prevention_db = {
        "malaria": """ЁЯЫбя╕П MALARIA PREVENTION:
ЁЯПа HOME PROTECTION:
тАв Use mosquito nets (treated with insecticide)
тАв Install window/door screens
тАв Use mosquito repellent creams/sprays
тАв Wear long-sleeved clothes after sunset

ЁЯМК ELIMINATE BREEDING SITES:
тАв Remove stagnant water from containers
тАв Clean water tanks weekly
тАв Cover water storage properly
тАв Maintain clean surroundings

ЁЯТК MEDICAL PREVENTION:
тАв Take antimalarial medication if traveling
тАв Consult doctor for prophylaxis

рдорд▓реЗрд░рд┐рдпрд╛ рд╕реЗ рдмрдЪрд╛рд╡:
тАв рдордЪреНрдЫрд░рджрд╛рдиреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
тАв рд░реБрдХреЗ рд╣реБрдП рдкрд╛рдиреА рдХреЛ рд╣рдЯрд╛рдПрдВ
тАв рд╢рд╛рдо рдХреЗ рдмрд╛рдж рдкреВрд░реЗ рдХрдкрдбрд╝реЗ рдкрд╣рдиреЗрдВ""",
        
        "dengue": """ЁЯЫбя╕П DENGUE PREVENTION:
ЁЯПа AEDES MOSQUITO CONTROL:
тАв Remove all stagnant water sources
тАв Change water in coolers/vases weekly
тАв Cover all water containers
тАв Clean roof gutters regularly

ЁЯХР TIME-BASED PROTECTION:
тАв Aedes bites during daytime
тАв Use repellent during day hours
тАв Wear full sleeves in morning/evening

ЁЯз╣ COMMUNITY ACTION:
тАв Report breeding sites to authorities
тАв Participate in community cleaning drives
тАв Educate neighbors about prevention

рдбреЗрдВрдЧреВ рд╕реЗ рдмрдЪрд╛рд╡:
тАв рд░реБрдХрд╛ рд╣реБрдЖ рдкрд╛рдиреА рд╕рд╛рдл рдХрд░реЗрдВ
тАв рджрд┐рди рдореЗрдВ рдордЪреНрдЫрд░ рднрдЧрд╛рдиреЗ рд╡рд╛рд▓реА рджрд╡рд╛ рд▓рдЧрд╛рдПрдВ
тАв рдкрд╛рдиреА рдХреЗ рдмрд░реНрддрди рдврдВрдХ рдХрд░ рд░рдЦреЗрдВ""",
        
        "covid": """ЁЯЫбя╕П COVID-19 PREVENTION:
ЁЯШ╖ PERSONAL PROTECTION:
тАв Wear well-fitted masks in public
тАв Maintain 6 feet social distance
тАв Avoid crowded places
тАв Stay home when sick

ЁЯз╝ HYGIENE PRACTICES:
тАв Wash hands for 20 seconds frequently
тАв Use alcohol-based sanitizer (60%+ alcohol)
тАв Don't touch face with unwashed hands
тАв Clean and disinfect surfaces

ЁЯТЙ VACCINATION:
тАв Get vaccinated and boosted
тАв Complete full vaccination course
тАв Follow local vaccination guidelines

ЁЯПа INDOOR AIR:
тАв Ensure good ventilation
тАв Use air purifiers if possible
тАв Open windows for fresh air

рдХреЛрд╡рд┐рдб-19 рд╕реЗ рдмрдЪрд╛рд╡:
тАв рдорд╛рд╕реНрдХ рдкрд╣рдиреЗрдВ
тАв 6 рдлреАрдЯ рдХреА рджреВрд░реА рдмрдирд╛рдП рд░рдЦреЗрдВ
тАв 20 рд╕реЗрдХрдВрдб рддрдХ рд╣рд╛рде рдзреЛрдПрдВ
тАв рдЯреАрдХрд╛рдХрд░рдг рдХрд░рд╛рдПрдВ"""
    }
    
    if disease in prevention_db:
        return prevention_db[disease]
    
    return "I can provide prevention tips for: Malaria, Dengue, COVID-19. Which disease prevention would you like to know about?"

async def handle_vaccination_query(parameters: Dict) -> str:
    """Handle vaccination-related queries with current info"""
    location = parameters.get("location", "")
    
    response = f"""ЁЯТЙ VACCINATION INFORMATION:

ЁЯПе WHERE TO GET VACCINATED:
тАв Government Hospitals
тАв Primary Health Centers (PHC)
тАв Community Health Centers (CHC)
тАв Private Hospitals (authorized)
тАв Urban Health Centers

ЁЯУЛ AVAILABLE VACCINES:
тАв COVID-19: Free at government centers
тАв Hepatitis B: Available at PHCs
тАв Typhoid: Recommended for high-risk areas
тАв Japanese Encephalitis: In endemic areas

ЁЯУ▒ HOW TO BOOK:
тАв Visit nearest health center directly
тАв Call local PHC for appointment
тАв Check with ASHA workers in your area

ЁЯУЮ HELPLINES:
тАв National: 1075
тАв State Health Dept: Check local numbers
тАв Emergency: 102

рдЯреАрдХрд╛рдХрд░рдг рдХреА рдЬрд╛рдирдХрд╛рд░реА:
тАв рдирдЬрджреАрдХреА рд╕рд░рдХрд╛рд░реА рдЕрд╕реНрдкрддрд╛рд▓ рдореЗрдВ рдЬрд╛рдПрдВ
тАв рдкреНрд░рд╛рдердорд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗрдВрджреНрд░ (PHC) рдореЗрдВ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ
тАв рдЖрд╢рд╛ рдХрд╛рд░реНрдпрдХрд░реНрддрд╛ рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВ

ЁЯТб Need help finding centers near you? Share your city/district name!"""
    
    return response

async def handle_health_data_query(parameters: Dict) -> str:
    """Handle health data queries using working APIs"""
    location = parameters.get("location", "india")
    
    try:
        # Get COVID data from disease.sh (working alternative)
        covid_response = requests.get(f"{DISEASE_API}/countries/{location}")
        
        if covid_response.status_code == 200:
            data = covid_response.json()
            
            response = f"""ЁЯУК HEALTH DATA FOR {location.upper()}:

ЁЯжа COVID-19 STATUS:
тАв Total Cases: {data.get('cases', 'N/A'):,}
тАв Active Cases: {data.get('active', 'N/A'):,}
тАв Recovered: {data.get('recovered', 'N/A'):,}
тАв Today's Cases: {data.get('todayCases', 'N/A'):,}
тАв Vaccination Doses: {data.get('tests', 'N/A'):,}

ЁЯУИ TREND:
тАв Cases Per Million: {data.get('casesPerOneMillion', 'N/A'):,}
тАв Tests Per Million: {data.get('testsPerOneMillion', 'N/A'):,}

ЁЯПе HEALTHCARE CAPACITY:
тАв Critical Cases: {data.get('critical', 'N/A'):,}
тАв Population: {data.get('population', 'N/A'):,}

тЪая╕П Stay updated with local health department guidelines!
ЁЯУ▒ Download Aarogya Setu app for latest updates

рд╕реНрд╡рд╛рд╕реНрдереНрдп рдбреЗрдЯрд╛ рдЕрдкрдбреЗрдЯ:
тАв рдХреБрд▓ рдорд╛рдорд▓реЗ: {data.get('cases', 'N/A'):,}
тАв рд╕рдХреНрд░рд┐рдп рдорд╛рдорд▓реЗ: {data.get('active', 'N/A'):,}
тАв рдареАрдХ рд╣реБрдП: {data.get('recovered', 'N/A'):,}"""
            
            return response
            
    except Exception as e:
        return f"Unable to fetch current health data. Please check local health department websites or contact helpline 1075."

async def handle_emergency_query(parameters: Dict) -> str:
    """Handle emergency contact queries"""
    return """ЁЯЪи EMERGENCY HEALTH CONTACTS:

ЁЯПе NATIONAL EMERGENCY NUMBERS:
тАв Medical Emergency: 102
тАв Ambulance Service: 108
тАв National Helpline: 1075
тАв Women Helpline: 1091
тАв Child Helpline: 1098

ЁЯжа COVID-19 HELPLINES:
тАв National COVID Helpline: +91-11-23978046
тАв Ayush Ministry: 14443

ЁЯПи IMMEDIATE ACTION:
тАв Call 102 for medical emergency
тАв Visit nearest hospital emergency ward
тАв Contact local police: 100 (if needed)

ЁЯй║ POISON CONTROL:
тАв All India Institute: 011-26588663
тАв Delhi Poison Info: 011-26589391

ЁЯУН STATE-WISE HELPLINES:
тАв Maharashtra: 020-26127394
тАв Delhi: 011-22307145
тАв Karnataka: 080-46848600
тАв Tamil Nadu: 044-29510500

рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рдВрдкрд░реНрдХ:
тАв рдореЗрдбрд┐рдХрд▓ рдЗрдорд░рдЬреЗрдВрд╕реА: 102
тАв рдПрдореНрдмреБрд▓реЗрдВрд╕: 108
тАв рд░рд╛рд╖реНрдЯреНрд░реАрдп рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 1075

ЁЯТб Save these numbers in your phone for quick access!"""

@app.post("/whatsapp")
async def whatsapp_webhook(request: Request):
    """Handle incoming WhatsApp messages"""
    form_data = await request.form()
    
    from_number = form_data.get("From", "")
    message_body = form_data.get("Body", "")
    
    # Process with our simplified NLP (since Dialogflow webhook is set up)
    response = await process_with_simple_nlp(message_body)
    
    # Send response back via WhatsApp
    try:
        message = client.messages.create(
            from_=TWILIO_WHATSAPP_NUMBER,
            body=response,
            to=from_number
        )
        return {"status": "success", "message_sid": message.sid}
    except Exception as e:
        return {"status": "error", "message": str(e)}

async def process_with_simple_nlp(text: str) -> str:
    """Simple NLP processing for direct WhatsApp integration"""
    text_lower = text.lower()
    
    # Symptom queries
    if any(word in text_lower for word in ["symptom", "рд▓рдХреНрд╖рдг", "рдмреАрдорд╛рд░реА", "disease"]):
        if "malaria" in text_lower or "рдорд▓реЗрд░рд┐рдпрд╛" in text:
            return await handle_symptoms_query({"disease": "malaria"})
        elif "dengue" in text_lower or "рдбреЗрдВрдЧреВ" in text:
            return await handle_symptoms_query({"disease": "dengue"})
        elif "covid" in text_lower or "рдХреЛрд╡рд┐рдб" in text:
            return await handle_symptoms_query({"disease": "covid"})
        else:
            return await handle_symptoms_query({})
    
    # Prevention queries
    elif any(word in text_lower for word in ["prevent", "prevention", "рдмрдЪрд╛рд╡", "рд░реЛрдХрдерд╛рдо"]):
        if "malaria" in text_lower or "рдорд▓реЗрд░рд┐рдпрд╛" in text:
            return await handle_prevention_query({"disease": "malaria"})
        elif "dengue" in text_lower or "рдбреЗрдВрдЧреВ" in text:
            return await handle_prevention_query({"disease": "dengue"})
        elif "covid" in text_lower or "рдХреЛрд╡рд┐рдб" in text:
            return await handle_prevention_query({"disease": "covid"})
        else:
            return await handle_prevention_query({})
    
    # Vaccination queries
    elif any(word in text_lower for word in ["vaccin", "рдЯреАрдХрд╛", "immuniz"]):
        return await handle_vaccination_query({})

    
    # Default greeting
    else:
        return """ЁЯПе рдирдорд╕реНрддреЗ! I'm your AI Health Assistant!

I can help you with:
тАв Disease symptoms (рдмреАрдорд╛рд░реА рдХреЗ рд▓рдХреНрд╖рдг)
тАв Prevention tips (рдмрдЪрд╛рд╡ рдХреЗ рддрд░реАрдХреЗ) 
тАв Vaccination info (рдЯреАрдХрд╛рдХрд░рдг)
тАв Health data (рд╕реНрд╡рд╛рд╕реНрдереНрдп рдбреЗрдЯрд╛)
тАв Emergency contacts (рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рдВрдкрд░реНрдХ)

Just ask me anything like:
"What are dengue symptoms?" or "рдорд▓реЗрд░рд┐рдпрд╛ рд╕реЗ рдХреИрд╕реЗ рдмрдЪреЗрдВ?"

ЁЯМЯ Type "help" anytime for assistance!"""

async def detect_language(text: str) -> str:
    """Detect language of input text"""
    try:
        detection = translator.detect(text)
        return detection.lang
    except:
        return 'en'  # Default to English

async def translate_text(text: str, target_lang: str = 'hi') -> str:
    """Translate text to target language"""
    try:
        # Skip translation if text already contains Hindi characters
        if any(ord(char) >= 2304 and ord(char) <= 2431 for char in text):
            return text
        
        result = translator.translate(text, dest=target_lang)
        return result.text
    except:
        return text  # Return original if translation fails

# Health monitoring background task
async def monitor_health_trends():
    """Monitor health trends and send alerts if needed"""
    while True:
        try:
            # Check for significant health trends
            response = requests.get(f"{DISEASE_API}/countries/india")
            if response.status_code == 200:
                data = response.json()
                today_cases = data.get('todayCases', 0)
                
                # Simple threshold-based alerting
                if today_cases > 10000:  # Adjust threshold as needed
                    alert_message = f"""ЁЯЪи HEALTH ALERT ЁЯЪи
                    
High number of COVID cases reported today: {today_cases:,}

Please follow safety guidelines:
тАв Wear masks in public
тАв Maintain social distancing  
тАв Get vaccinated
тАв Wash hands frequently

Stay safe! ЁЯЩП"""
                    
                    # Here you would send to registered users
                    print(f"Alert triggered: {today_cases} cases")
            
            # Check every 6 hours
            await asyncio.sleep(21600)
            
        except Exception as e:
            print(f"Health monitoring error: {e}")
            await asyncio.sleep(3600)  # Retry in 1 hour

@app.on_event("startup")
async def startup_event():
    """Start background tasks"""
    asyncio.create_task(monitor_health_trends())

@app.get("/")
async def root():
    return {"message": "Healthcare Chatbot API is running!", "version": "1.0"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now()}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)